{"name": "test_add_product_with_duplicated_id", "status": "failed", "statusDetails": {"message": "Failed: Expected IntegrityError was not raised", "trace": "products_table = <dbs.sqlite_products_table.SqliteProductsTable object at 0x103cbf0b0>\n\n    def test_add_product_with_duplicated_id(products_table):\n        # Negative test: Attempt to add two products with the same ID\n        product_count_initial = len(products_table.get_all_products())\n    \n        # Add the first product\n        products_table.create_product()\n    \n        # Get the product count after adding the first product\n        product_count_after_first_add = len(products_table.get_all_products())\n    \n        # Attempt to add another product with the same ID\n        try:\n            products_table.create_product()\n        except sqlite3.IntegrityError as e:\n            # Check if the expected exception is raised\n            assert \"UNIQUE constraint failed\" in str(e)\n        else:\n            # If no exception is raised, fail the test\n>           pytest.fail(\"Expected IntegrityError was not raised\")\nE           Failed: Expected IntegrityError was not raised\n\ntest_get_products.py:43: Failed"}, "start": 1712676754645, "stop": 1712676754648, "uuid": "ab2994f4-0573-4d20-8b40-d1ab48bbdbb0", "historyId": "efc3fad8f23c669c66c8d3fd2968e14a", "testCaseId": "efc3fad8f23c669c66c8d3fd2968e14a", "fullName": "test.db_tests.test_get_products#test_add_product_with_duplicated_id", "labels": [{"name": "parentSuite", "value": "test.db_tests"}, {"name": "suite", "value": "test_get_products"}, {"name": "host", "value": "Dariias-MacBook-Pro.local"}, {"name": "thread", "value": "36198-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.db_tests.test_get_products"}]}